// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package sinktest

import (
	"github.com/cockroachdb/cdc-sink/internal/target/apply"
	"github.com/cockroachdb/cdc-sink/internal/target/apply/fan"
	"github.com/cockroachdb/cdc-sink/internal/target/memo"
	"github.com/cockroachdb/cdc-sink/internal/target/schemawatch"
	"github.com/cockroachdb/cdc-sink/internal/target/stage"
)

// Injectors from injector.go:

// NewFixture constructs a self-contained test fixture.
func NewBaseFixture() (*BaseFixture, func(), error) {
	context, cleanup, err := ProvideContext()
	if err != nil {
		return nil, nil, err
	}
	dbInfo, err := ProvideDBInfo(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	pool := ProvidePool(dbInfo)
	stagingDB, cleanup2, err := ProvideStagingDB(context, pool)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	testDB, cleanup3, err := ProvideTestDB(context, pool)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	baseFixture := &BaseFixture{
		Context:   context,
		DBInfo:    dbInfo,
		Pool:      pool,
		StagingDB: stagingDB,
		TestDB:    testDB,
	}
	return baseFixture, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// NewFixture constructs a self-contained test fixture for all services
// in the target sub-packages.
func NewFixture() (*Fixture, func(), error) {
	context, cleanup, err := ProvideContext()
	if err != nil {
		return nil, nil, err
	}
	dbInfo, err := ProvideDBInfo(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	pool := ProvidePool(dbInfo)
	stagingDB, cleanup2, err := ProvideStagingDB(context, pool)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	testDB, cleanup3, err := ProvideTestDB(context, pool)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	baseFixture := BaseFixture{
		Context:   context,
		DBInfo:    dbInfo,
		Pool:      pool,
		StagingDB: stagingDB,
		TestDB:    testDB,
	}
	configs, cleanup4, err := apply.ProvideConfigs(context, pool, stagingDB)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	watchers, cleanup5 := schemawatch.ProvideFactory(pool)
	appliers, cleanup6 := apply.ProvideFactory(configs, watchers)
	fans := &fan.Fans{
		Appliers: appliers,
		Pool:     pool,
	}
	memoMemo, err := memo.ProvideMemo(context, pool, stagingDB)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	stagers := stage.ProvideFactory(pool, stagingDB)
	watcher, err := ProvideWatcher(context, testDB, watchers)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	fixture := &Fixture{
		BaseFixture: baseFixture,
		Appliers:    appliers,
		Configs:     configs,
		Fans:        fans,
		Memo:        memoMemo,
		Stagers:     stagers,
		Watchers:    watchers,
		Watcher:     watcher,
	}
	return fixture, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
