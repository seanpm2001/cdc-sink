name: Golang
permissions:
  contents: read
  packages: read
on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
  pull_request:
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
  workflow_dispatch:
    inputs:
      build_binaries:
        description: 'Build distributable binaries'
        type: boolean
        required: false

jobs:
  # Binaries will build cdc-sink for a variety of common platforms. This
  # job only runs on pushes to a target branch or tag or in response to
  # a manual run that requests binaries.
  binaries:
    name: Binaries
    if: ${{ github.event_name == 'push' || inputs.build_binaries }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: arm64
          - os: darwin
            arch: amd64
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            ext: .exe
    env:
      BUILDNAME: cdc-sink-${{ matrix.os }}-${{ matrix.arch }}
      OUTPUT: cdc-sink-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
    steps:
      - uses: actions/checkout@v3

      # Use separate build caches for each target platform.
      - name: Write cache key
        run: echo '${{ github.job }} ${{ toJSON(matrix) }} ${{ hashFiles('go.sum') }}' > CACHE_KEY

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: CACHE_KEY

      - name: Create version file
        run: git describe --tags --always --dirty > VERSION.txt

      - name: Build
        run: >
          go
          build
          -v
          -ldflags="-s -w"
          -o $OUTPUT
          .
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - name: Upload zip contents
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILDNAME }}
          path: |
            ${{ env.OUTPUT }}
            README.md
            VERSION.txt
            licenses/*.txt
          if-no-files-found: error

  # Static code-quality checks.
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Just cache based on job and go.sum contents.
      - name: Write cache key
        run: echo '${{ github.job }} ${{ hashFiles('go.sum') }}' > CACHE_KEY

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: CACHE_KEY

      - name: crlfmt returns no deltas
        if: ${{ always() }}
        run: |
          DELTA=$(go run github.com/cockroachdb/crlfmt -ignore _gen.go .)
          echo $DELTA
          test -z "$DELTA"

      - name: Lint
        if: ${{ always() }}
        run: go run golang.org/x/lint/golint -set_exit_status ./...

      - name: Static checks
        if: ${{ always() }}
        run: go run honnef.co/go/tools/cmd/staticcheck -checks all ./...

  # Integration matrix tests for all supported CRDB and source DBs.
  tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Pick a primary version to test all of the integration sources
        # against. The matrix component names should use the target
        # names listed in the docker-compose.yml file in the parent
        # directory.
        cockroachdb: [ v22.1 ]
        integration:
          - "firestore"
          - "mysql-v8"
          - "mysql-mariadb-v10"
          - "postgresql-v11"
          - "postgresql-v12"
          - "postgresql-v13"
          - "postgresql-v14"
        # The cockroachdb value in this include block will collide with
        # the value from the auto-expanded matrix. The net effect is
        # that we'll skip integration tests against older versions of
        # CRDB. These tests are kept around to ensure that the target
        # package doesn't use any SQL that couldn't be run on older CRDB
        # versions.
        include:
          - cockroachdb: v20.2
          - cockroachdb: v21.1
          - cockroachdb: v21.2
          - cockroachdb: v22.2 # Note this is currently pinned to alpha.3
    env:
      COVER_OUT: coverage-${{ matrix.cockroachdb }}-${{ matrix.integration }}.out
      FIRESTORE_EMULATOR_HOST: 127.0.0.1:8181
      JUNIT_OUT: junit-${{ matrix.cockroachdb }}-${{ matrix.integration }}.xml
      TEST_OUT: go-test-${{ matrix.cockroachdb }}-${{ matrix.integration }}.json
    steps:
      - uses: actions/checkout@v3

      # Just cache based on job and go.sum contents.
      - name: Write cache key
        run: echo '${{ github.job }} ${{ hashFiles('go.sum') }}' > CACHE_KEY

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: CACHE_KEY

      # Ensure we can grab any private images we need for testing.
      - name: Log in to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start CockroachDB
        working-directory: .github
        run: docker-compose up -d cockroachdb-${{ matrix.cockroachdb }}

      - name: Start ${{ matrix.integration }}
        if: ${{ matrix.integration }}
        working-directory: .github
        run: docker-compose up -d ${{ matrix.integration }}

      # The go test json output will be written into a file that's
      # processed by a subsequent step into a JUnit.xml file. The test
      # reports are aggregated later on to produce a nicer summary of
      # the test output in the GitHub Actions UI.
      #
      # Inspired by
      # https://www.cloudwithchris.com/blog/githubactions-testsummary-go/
      - name: Go Tests
        env:
          COCKROACH_DEV_LICENSE: ${{ secrets.COCKROACH_DEV_LICENSE }}
          CDC_INTEGRATION: ${{ matrix.integration }}
        run: >
          go test
          -coverpkg=./internal/...
          -covermode=atomic
          -coverprofile=${{ env.COVER_OUT }}
          -json
          -race
          ./... > ${{ env.TEST_OUT }}

      - name: Stop databases
        if: ${{ always() }}
        working-directory: .github
        run: docker-compose down

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVER_OUT }}

      - name: Convert test json to JUnit xml
        if: always()
        run: >
          go run github.com/jstemmer/go-junit-report/v2
          -parser gojson
          -in ${{ env.TEST_OUT }}
          -out ${{ env.JUNIT_OUT }}
          -p cockroachdb=${{ matrix.cockroachdb }}
          -p integration=${{ matrix.integration }}
          -package-name ${{ matrix.cockroachdb }}-${{ matrix.integration }}

      # Upload all test reports to a common artifact name, to make them
      # available to the summarization step. The go test json is
      # uploaded as a developer convenience.
      - name: Stash test logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-reports
          path: |
            ${{ env.COVER_OUT }}
            ${{ env.JUNIT_OUT }}
            ${{ env.TEST_OUT }}
          retention-days: 7

  # This job downloads the test log files generated in the integration
  # job and summarizes them into the GitHub Actions UI.
  summarize-tests:
    name: Test summaries
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    steps:
      - name: Download reports
        uses: actions/download-artifact@v3
        with:
          name: integration-reports
      - name: Summarize
        uses: test-summary/action@v2
        with:
          paths: junit-*.xml
